{"remainingRequest":"C:\\Users\\Misterlinux\\Documents\\GitHub\\il secondo\\quasi-blog\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Misterlinux\\Documents\\GitHub\\il secondo\\quasi-blog\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Misterlinux\\Documents\\GitHub\\il secondo\\quasi-blog\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Misterlinux\\Documents\\GitHub\\il secondo\\quasi-blog\\node_modules\\vue-picture-swipe\\src\\VuePictureSwipe.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Misterlinux\\Documents\\GitHub\\il secondo\\quasi-blog\\node_modules\\vue-picture-swipe\\src\\VuePictureSwipe.vue","mtime":499162500000},{"path":"C:\\Users\\Misterlinux\\Documents\\GitHub\\il secondo\\quasi-blog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Misterlinux\\Documents\\GitHub\\il secondo\\quasi-blog\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Misterlinux\\Documents\\GitHub\\il secondo\\quasi-blog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Misterlinux\\Documents\\GitHub\\il secondo\\quasi-blog\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport PhotoSwipe from 'photoswipe/dist/photoswipe';\nimport PhotoSwipeUI_Default from 'photoswipe/dist/photoswipe-ui-default';\nimport 'photoswipe/dist/photoswipe.css';\nimport 'photoswipe/dist/default-skin/default-skin.css';\nexport default {\n  props: {\n    items: {\n      default: [{\n        src: 'http://via.placeholder.com/600x400',\n        thumbnail: 'http://via.placeholder.com/64x64',\n        w: 600,\n        h: 400,\n        alt: 'some numbers on a grey background'\n      }, {\n        src: 'http://via.placeholder.com/1200x900',\n        thumbnail: 'http://via.placeholder.com/64x64',\n        w: 1200,\n        h: 900\n      }],\n      type: Array\n    },\n    options: {\n      default: function _default() {\n        return {};\n      },\n      type: Object\n    }\n  },\n  data: function data() {\n    return {\n      pswp: null,\n      angle: 0\n    };\n  },\n  mounted: function mounted() {\n    var that = this;\n\n    var initPhotoSwipeFromDOM = function initPhotoSwipeFromDOM(gallerySelector) {\n      // parse slide data (url, title, size ...) from DOM elements\n      // (children of gallerySelector)\n      var parseThumbnailElements = function parseThumbnailElements(el) {\n        var thumbElements = el.childNodes,\n            numNodes = thumbElements.length,\n            items = [],\n            figureEl,\n            linkEl,\n            size,\n            item;\n\n        for (var i = 0; i < numNodes; i++) {\n          figureEl = thumbElements[i]; // <figure> element\n          // include only element nodes\n\n          if (figureEl.nodeType !== 1) {\n            continue;\n          }\n\n          linkEl = figureEl.children[0]; // <a> element\n\n          size = linkEl.getAttribute('data-size').split('x'); // create slide object\n\n          item = {\n            src: linkEl.getAttribute('href'),\n            w: parseInt(size[0], 10),\n            h: parseInt(size[1], 10),\n            title: linkEl.getAttribute('title')\n          };\n\n          if (figureEl.children.length > 1) {\n            // <figcaption> content\n            item.title = figureEl.children[1].innerHTML;\n          }\n\n          if (linkEl.children.length > 0) {\n            // <img> thumbnail element, retrieving thumbnail url\n            item.msrc = linkEl.children[0].getAttribute('src');\n          }\n\n          item.el = figureEl; // save link to element for getThumbBoundsFn\n\n          items.push(item);\n        }\n\n        return items;\n      }; // find nearest parent element\n\n\n      var closest = function closest(el, fn) {\n        return el && (fn(el) ? el : closest(el.parentNode, fn));\n      }; // triggers when user clicks on thumbnail\n\n\n      var onThumbnailsClick = function onThumbnailsClick(e) {\n        e = e || window.event;\n        e.preventDefault ? e.preventDefault() : e.returnValue = false;\n        var eTarget = e.target || e.srcElement; // find root element of slide\n\n        var clickedListItem = closest(eTarget, function (el) {\n          return el.tagName && el.tagName.toUpperCase() === 'FIGURE';\n        });\n\n        if (!clickedListItem) {\n          return;\n        } // find index of clicked item by looping through all child nodes\n        // alternatively, you may define index via data- attribute\n\n\n        var clickedGallery = clickedListItem.parentNode,\n            childNodes = clickedListItem.parentNode.childNodes,\n            numChildNodes = childNodes.length,\n            nodeIndex = 0,\n            index;\n\n        for (var i = 0; i < numChildNodes; i++) {\n          if (childNodes[i].nodeType !== 1) {\n            continue;\n          }\n\n          if (childNodes[i] === clickedListItem) {\n            index = nodeIndex;\n            break;\n          }\n\n          nodeIndex++;\n        }\n\n        if (index >= 0) {\n          // open PhotoSwipe if valid index found\n          openPhotoSwipe(index, clickedGallery);\n        }\n\n        return false;\n      }; // parse picture index and gallery index from URL (#&pid=1&gid=2)\n\n\n      var photoswipeParseHash = function photoswipeParseHash() {\n        var hash = window.location.hash.substring(1),\n            params = {};\n\n        if (hash.length < 5) {\n          return params;\n        }\n\n        var vars = hash.split('&');\n\n        for (var i = 0; i < vars.length; i++) {\n          if (!vars[i]) {\n            continue;\n          }\n\n          var pair = vars[i].split('=');\n\n          if (pair.length < 2) {\n            continue;\n          }\n\n          params[pair[0]] = pair[1];\n        }\n\n        if (params.gid) {\n          params.gid = parseInt(params.gid, 10);\n        }\n\n        return params;\n      };\n\n      var openPhotoSwipe = function openPhotoSwipe(index, galleryElement, disableAnimation, fromURL) {\n        var pswpElement = galleryElement.parentElement.querySelector('.pswp'),\n            gallery,\n            options,\n            items;\n        items = parseThumbnailElements(galleryElement); // define options (if needed)\n\n        options = {\n          // define gallery index (for URL)\n          galleryUID: galleryElement.getAttribute('data-pswp-uid'),\n          getThumbBoundsFn: function getThumbBoundsFn(index) {\n            // See Options -> getThumbBoundsFn section of documentation for more info\n            var thumbnail = items[index].el.getElementsByTagName('img')[0],\n                // find thumbnail\n            pageYScroll = window.pageYOffset || document.documentElement.scrollTop,\n                rect = thumbnail.getBoundingClientRect();\n            return {\n              x: rect.left,\n              y: rect.top + pageYScroll,\n              w: rect.width\n            };\n          }\n        }; // PhotoSwipe opened from URL\n\n        if (fromURL) {\n          if (options.galleryPIDs) {\n            // parse real index when custom PIDs are used\n            // http://photoswipe.com/documentation/faq.html#custom-pid-in-url\n            for (var j = 0; j < items.length; j++) {\n              if (items[j].pid == index) {\n                options.index = j;\n                break;\n              }\n            }\n          } else {\n            // in URL indexes start from 1\n            options.index = parseInt(index, 10) - 1;\n          }\n        } else {\n          options.index = parseInt(index, 10);\n        } // exit if index not found\n\n\n        if (isNaN(options.index)) {\n          return;\n        }\n\n        if (disableAnimation) {\n          options.showAnimationDuration = 0;\n        } // Pass data to PhotoSwipe and initialize it\n\n\n        gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, Object.assign(options, that.options));\n        gallery.listen('gettingData', function (index, item) {\n          if (item.w < 1 || item.h < 1) {\n            // unknown size\n            var img = new Image();\n\n            img.onload = function () {\n              // will get size after load\n              item.w = this.width; // set image width\n\n              item.h = this.height; // set image height\n\n              gallery.invalidateCurrItems(); // reinit Items\n\n              gallery.updateSize(true); // reinit Items\n            };\n\n            img.src = item.src; // let's download image\n          }\n        });\n        gallery.init();\n        that.pswp = gallery;\n      }; // loop through all gallery elements and bind events\n\n\n      var galleryElements = document.querySelectorAll(gallerySelector);\n\n      for (var i = 0, l = galleryElements.length; i < l; i++) {\n        galleryElements[i].setAttribute('data-pswp-uid', i + 1);\n        galleryElements[i].onclick = onThumbnailsClick;\n      } // Parse URL and open gallery if it contains #&pid=3&gid=1\n\n\n      var hashData = photoswipeParseHash();\n\n      if (hashData.pid && hashData.gid) {\n        openPhotoSwipe(hashData.pid, galleryElements[hashData.gid - 1], true, true);\n      }\n    };\n\n    initPhotoSwipeFromDOM('.my-gallery');\n  },\n  methods: {\n    rotate: function rotate(newAngle) {\n      var _this = this;\n\n      this.angle = this.angle + newAngle;\n      this.$el.querySelectorAll('.pswp__img').forEach(function (i) {\n        return i.style.transform = \"rotate(\".concat(_this.angle, \"deg)\");\n      });\n    },\n    resetAngle: function resetAngle() {\n      var _this2 = this;\n\n      this.angle = 0;\n      this.$el.querySelectorAll('.pswp__img').forEach(function (i) {\n        return i.style.transform = \"rotate(\".concat(_this2.angle, \"deg)\");\n      });\n    }\n  }\n};",{"version":3,"sources":["VuePictureSwipe.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <div class=\"my-gallery\" itemscope itemtype=\"http://schema.org/ImageGallery\">\n\n      <figure\n          itemprop=\"associatedMedia\"\n          itemscope\n          itemtype=\"http://schema.org/ImageObject\"\n          v-for=\"(item, index) in items\" :src=\"item.src\"\n          v-bind:key=\"index\">\n        <a :href=\"item.src\" itemprop=\"contentUrl\" :data-size=\"'' + item.w + 'x' + item.h\" :title=\"item.title\">\n          <img :src=\"item.thumbnail\" :alt=\"item.alt\" itemprop=\"thumbnail\"/>\n        </a>\n      </figure>\n    </div>\n\n    <div class=\"pswp\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\n      <div class=\"pswp__bg\"></div>\n      <div class=\"pswp__scroll-wrap\">\n        <div class=\"pswp__container\">\n          <div class=\"pswp__item\"></div>\n          <div class=\"pswp__item\"></div>\n          <div class=\"pswp__item\"></div>\n        </div>\n        <div class=\"pswp__ui pswp__ui--hidden\">\n\n          <div class=\"pswp__top-bar\">\n            <div class=\"pswp__counter\"></div>\n            <button class=\"pswp__button pswp__button--close\" title=\"Close (Esc)\"></button>\n\n            <span class=\"rotation-wrapper\">\n              <i class=\"material-icons\" v-if=options.rotationOn @click=\"rotate(-90)\">rotate_left</i>\n              <i class=\"material-icons\" v-if=options.rotationOn @click=\"rotate(90)\">rotate_right</i>\n            </span>\n\n            <button class=\"pswp__button pswp__button--share\" title=\"Share\"></button>\n            <button class=\"pswp__button pswp__button--fs\" title=\"Toggle fullscreen\"></button>\n            <button class=\"pswp__button pswp__button--zoom\" title=\"Zoom in/out\"></button>\n            <div class=\"pswp__preloader\">\n              <div class=\"pswp__preloader__icn\">\n                <div class=\"pswp__preloader__cut\">\n                  <div class=\"pswp__preloader__donut\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"pswp__share-modal pswp__share-modal--hidden pswp__single-tap\">\n            <div class=\"pswp__share-tooltip\"></div>\n          </div>\n          <button class=\"pswp__button pswp__button--arrow--left\" title=\"Previous (arrow left)\" @click='resetAngle'>\n          </button>\n          <button class=\"pswp__button pswp__button--arrow--right\" title=\"Next (arrow right)\" @click='resetAngle'>\n          </button>\n          <div class=\"pswp__caption\">\n            <div class=\"pswp__caption__center\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n  import PhotoSwipe from 'photoswipe/dist/photoswipe'\n  import PhotoSwipeUI_Default from 'photoswipe/dist/photoswipe-ui-default'\n  import 'photoswipe/dist/photoswipe.css'\n  import 'photoswipe/dist/default-skin/default-skin.css'\n\n  export default {\n    props: {\n      items: {\n        default: [\n          {\n            src: 'http://via.placeholder.com/600x400',\n            thumbnail: 'http://via.placeholder.com/64x64',\n            w: 600,\n            h: 400,\n            alt: 'some numbers on a grey background'\n          },\n          {\n            src: 'http://via.placeholder.com/1200x900',\n            thumbnail: 'http://via.placeholder.com/64x64',\n            w: 1200,\n            h: 900\n          }\n        ],\n        type: Array\n      },\n      options: {\n        default: () => ({}),\n        type: Object\n      }\n    },\n    data() {\n      return {\n        pswp: null,\n        angle: 0\n      };\n    },\n    mounted() {\n      let that = this;\n      let initPhotoSwipeFromDOM = function (gallerySelector) {\n\n        // parse slide data (url, title, size ...) from DOM elements\n        // (children of gallerySelector)\n        let parseThumbnailElements = function (el) {\n          let thumbElements = el.childNodes,\n            numNodes = thumbElements.length,\n            items = [],\n            figureEl,\n            linkEl,\n            size,\n            item;\n\n          for (let i = 0; i < numNodes; i++) {\n\n            figureEl = thumbElements[i]; // <figure> element\n\n            // include only element nodes\n            if (figureEl.nodeType !== 1) {\n              continue;\n            }\n\n            linkEl = figureEl.children[0]; // <a> element\n\n            size = linkEl.getAttribute('data-size').split('x');\n\n            // create slide object\n            item = {\n              src: linkEl.getAttribute('href'),\n              w: parseInt(size[0], 10),\n              h: parseInt(size[1], 10),\n              title: linkEl.getAttribute('title')\n            };\n\n\n            if (figureEl.children.length > 1) {\n              // <figcaption> content\n              item.title = figureEl.children[1].innerHTML;\n            }\n\n            if (linkEl.children.length > 0) {\n              // <img> thumbnail element, retrieving thumbnail url\n              item.msrc = linkEl.children[0].getAttribute('src');\n            }\n\n            item.el = figureEl; // save link to element for getThumbBoundsFn\n            items.push(item);\n          }\n\n          return items;\n        };\n\n        // find nearest parent element\n        let closest = function closest(el, fn) {\n          return el && (fn(el) ? el : closest(el.parentNode, fn));\n        };\n\n        // triggers when user clicks on thumbnail\n        let onThumbnailsClick = function (e) {\n          e = e || window.event;\n          e.preventDefault ? e.preventDefault() : e.returnValue = false;\n\n          let eTarget = e.target || e.srcElement;\n\n          // find root element of slide\n          let clickedListItem = closest(eTarget, function (el) {\n            return (el.tagName && el.tagName.toUpperCase() === 'FIGURE');\n          });\n\n          if (!clickedListItem) {\n            return;\n          }\n\n          // find index of clicked item by looping through all child nodes\n          // alternatively, you may define index via data- attribute\n          let clickedGallery = clickedListItem.parentNode,\n            childNodes = clickedListItem.parentNode.childNodes,\n            numChildNodes = childNodes.length,\n            nodeIndex = 0,\n            index;\n\n          for (let i = 0; i < numChildNodes; i++) {\n            if (childNodes[i].nodeType !== 1) {\n              continue;\n            }\n\n            if (childNodes[i] === clickedListItem) {\n              index = nodeIndex;\n              break;\n            }\n            nodeIndex++;\n          }\n\n\n          if (index >= 0) {\n            // open PhotoSwipe if valid index found\n            openPhotoSwipe(index, clickedGallery);\n          }\n          return false;\n        };\n\n        // parse picture index and gallery index from URL (#&pid=1&gid=2)\n        let photoswipeParseHash = function () {\n          let hash = window.location.hash.substring(1),\n            params = {};\n\n          if (hash.length < 5) {\n            return params;\n          }\n\n          let vars = hash.split('&');\n          for (let i = 0; i < vars.length; i++) {\n            if (!vars[i]) {\n              continue;\n            }\n            let pair = vars[i].split('=');\n            if (pair.length < 2) {\n              continue;\n            }\n            params[pair[0]] = pair[1];\n          }\n\n          if (params.gid) {\n            params.gid = parseInt(params.gid, 10);\n          }\n\n          return params;\n        };\n\n        let openPhotoSwipe = function (index, galleryElement, disableAnimation, fromURL) {\n          let pswpElement = galleryElement.parentElement.querySelector('.pswp'),\n            gallery,\n            options,\n            items;\n\n          items = parseThumbnailElements(galleryElement);\n\n          // define options (if needed)\n          options = {\n\n            // define gallery index (for URL)\n            galleryUID: galleryElement.getAttribute('data-pswp-uid'),\n\n            getThumbBoundsFn: function (index) {\n              // See Options -> getThumbBoundsFn section of documentation for more info\n              let thumbnail = items[index].el.getElementsByTagName('img')[0], // find thumbnail\n                pageYScroll = window.pageYOffset || document.documentElement.scrollTop,\n                rect = thumbnail.getBoundingClientRect();\n\n              return {x: rect.left, y: rect.top + pageYScroll, w: rect.width};\n            }\n\n          };\n\n          // PhotoSwipe opened from URL\n          if (fromURL) {\n            if (options.galleryPIDs) {\n              // parse real index when custom PIDs are used\n              // http://photoswipe.com/documentation/faq.html#custom-pid-in-url\n              for (let j = 0; j < items.length; j++) {\n                if (items[j].pid == index) {\n                  options.index = j;\n                  break;\n                }\n              }\n            } else {\n              // in URL indexes start from 1\n              options.index = parseInt(index, 10) - 1;\n            }\n          } else {\n            options.index = parseInt(index, 10);\n          }\n\n          // exit if index not found\n          if (isNaN(options.index)) {\n            return;\n          }\n\n          if (disableAnimation) {\n            options.showAnimationDuration = 0;\n          }\n\n          // Pass data to PhotoSwipe and initialize it\n          gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, Object.assign(options, that.options));\n          gallery.listen('gettingData', function(index, item) {\n            if (item.w < 1 || item.h < 1) { // unknown size\n              let img = new Image();\n              img.onload = function() { // will get size after load\n                item.w = this.width; // set image width\n                item.h = this.height; // set image height\n                gallery.invalidateCurrItems(); // reinit Items\n                gallery.updateSize(true); // reinit Items\n              };\n              img.src = item.src; // let's download image\n            }\n          });\n          gallery.init();\n          that.pswp = gallery;\n        };\n\n        // loop through all gallery elements and bind events\n        let galleryElements = document.querySelectorAll(gallerySelector);\n\n        for (let i = 0, l = galleryElements.length; i < l; i++) {\n          galleryElements[i].setAttribute('data-pswp-uid', i + 1);\n          galleryElements[i].onclick = onThumbnailsClick;\n        }\n\n        // Parse URL and open gallery if it contains #&pid=3&gid=1\n        let hashData = photoswipeParseHash();\n        if (hashData.pid && hashData.gid) {\n          openPhotoSwipe(hashData.pid, galleryElements[hashData.gid - 1], true, true);\n        }\n      };\n\n      initPhotoSwipeFromDOM('.my-gallery');\n\n    },\n    methods: {\n      rotate: function(newAngle) {\n        this.angle = this.angle + newAngle\n        this.$el.querySelectorAll('.pswp__img').forEach(i => i.style.transform = `rotate(${this.angle}deg)`)\n      },\n      resetAngle: function() {\n        this.angle = 0\n        this.$el.querySelectorAll('.pswp__img').forEach(i => i.style.transform = `rotate(${this.angle}deg)`)\n      },\n    }\n  }\n</script>\n<style>\n@import \"https://fonts.googleapis.com/icon?family=Material+Icons\";\n  .pswp__top-bar {\n    text-align: right;\n  }\n  .pswp__caption__center {\n    text-align: center\n  }\n  .rotation-wrapper {\n    color: white;\n    position: relative;\n    top: 10px;\n  }\n  figure {\n    display: inline;\n    margin: 5px;\n  }\n</style>\n"],"sourceRoot":"node_modules/vue-picture-swipe/src"}]}