{"remainingRequest":"C:\\Users\\Misterlinux\\Documents\\GitHub\\il secondo\\the-quasi\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Misterlinux\\Documents\\GitHub\\il secondo\\the-quasi\\node_modules\\vue-loader\\lib\\index.js!C:\\Users\\Misterlinux\\Documents\\GitHub\\il secondo\\the-quasi\\node_modules\\vue-markdown-loader\\lib\\markdown-compiler.js??ref--14-1!C:\\Users\\Misterlinux\\Documents\\GitHub\\il secondo\\the-quasi\\src\\markdowns\\Introduction\\5571.md?vue&type=template&id=24468982&","dependencies":[{"path":"C:\\Users\\Misterlinux\\Documents\\GitHub\\il secondo\\the-quasi\\src\\markdowns\\Introduction\\5571.md","mtime":1578585261495},{"path":"C:\\Users\\Misterlinux\\Documents\\GitHub\\il secondo\\the-quasi\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1574709379321},{"path":"C:\\Users\\Misterlinux\\Documents\\GitHub\\il secondo\\the-quasi\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1574709430863},{"path":"C:\\Users\\Misterlinux\\Documents\\GitHub\\il secondo\\the-quasi\\node_modules\\vue-loader\\lib\\index.js","mtime":1574709430863},{"path":"C:\\Users\\Misterlinux\\Documents\\GitHub\\il secondo\\the-quasi\\node_modules\\vue-markdown-loader\\lib\\markdown-compiler.js","mtime":1574709430878}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"section\", [\n      _c(\"div\", { staticClass: \"thirdOverlayLine\" }),\n      _c(\"h1\", { staticClass: \"titlo mt-3\" }, [_vm._v(\"\\n  5571 (part 1)\\n\")]),\n      _c(\"div\", { staticClass: \"firsto\" }, [\n        _c(\"img\", {\n          staticClass: \"imma\",\n          attrs: { src: require(\"../../assets/cover/5571.jpg\") }\n        }),\n        _c(\"h3\", { staticClass: \"appetize mb-1\" }, [\n          _vm._v(\n            '\\n    \"It took so long to get the canvas, luckily I already have the brushes with me\"\\n    '\n          )\n        ])\n      ]),\n      _c(\"div\", { attrs: { id: \"bloggo\" } }, [\n        _c(\"img\", {\n          staticClass: \"righto\",\n          attrs: { src: require(\"../../assets/inside/1.png\") }\n        }),\n        _c(\"p\", [\n          _vm._v(\"Data has the potencial to be \"),\n          _c(\"em\", [_vm._v(\"anything\")]),\n          _vm._v(\n            \".\\nAnd 5571 lines of data can result in a slight novel, or a Blogk, this \"\n          ),\n          _c(\"em\", [_c(\"strong\", [_vm._v(\"Blogk\")])]),\n          _vm._v(\".\")\n        ]),\n        _c(\"p\", [\n          _vm._v(\n            \"Introduction is about what I got during those 5571 lines, of\\ndesign and programming, that I will use for future learnings.\"\n          )\n        ]),\n        _c(\"hr\"),\n        _c(\"p\", [\n          _c(\"strong\", [_vm._v(\"Markup\")]),\n          _vm._v(\n            \" languages (a branch of computer languages) allow text to be read by both\\nyou and your pc, it uses tags to define text elements.\\nHere the one used are \"\n          ),\n          _c(\"strong\", [_c(\"em\", [_vm._v(\"html\")])]),\n          _vm._v(\" and \"),\n          _c(\"strong\", [_c(\"em\", [_vm._v(\"markdown\")])])\n        ]),\n        _c(\"div\", { staticClass: \"paragraph mb-2\" }, [\n          _vm._v(\"How to Markdown\")\n        ]),\n        _c(\"p\", [\n          _vm._v(\"Markdown (.md extencion file) is an easy to read plan \"),\n          _c(\"u\", [_vm._v(\"text format\")]),\n          _vm._v(\".\"),\n          _c(\"br\"),\n          _vm._v(\n            \"\\nit allows a faster stesure , without the needing of traditional <> tags,\\nwith its simpler styling of inline text elements.\"\n          )\n        ]),\n        _c(\"h3\", [_vm._v(\"font size\")]),\n        _c(\"h2\", [_vm._v(\"can be defined\")]),\n        _c(\"h1\", [_vm._v(\"by symply adding # at the start of the line\")]),\n        _c(\"pre\", { staticClass: \"codice col-md-10 \" }, [\n          _vm._v(\n            \" \\n### lol which reproduce the html tag <h3> \\n## <h2>,\\n# and <h1> depending on the number of asteriks\\n\"\n          )\n        ]),\n        _c(\"p\", [\n          _vm._v(\"about the font-style we can get a more \"),\n          _c(\"strong\", [_vm._v(\"bolder\")]),\n          _vm._v(\" text or a \"),\n          _c(\"em\", [_vm._v(\"more italic one\")])\n        ]),\n        _c(\"pre\", { staticClass: \"codice col-md-10\" }, [\n          _vm._v(\n            \" \\nextremily easily just by adding the *asteriks* for an italic one\\nor **more** for the bold effect and the _italic_\\n\\ninstead of opening and closing the corrispective html tags like <b>asteriks</b> <i>underling</i>\\n\"\n          )\n        ]),\n        _c(\"br\"),\n        _c(\"p\", [\n          _vm._v(\"defining \"),\n          _c(\"strong\", [_vm._v(\"list\")]),\n          _vm._v(\" is as simple as that too:\")\n        ]),\n        _c(\"ul\", [\n          _c(\"li\", [_vm._v(\"defining the rythimng\")]),\n          _c(\"li\", [_vm._v(\"of the given article\")])\n        ]),\n        _c(\"ul\", [_c(\"li\", [_vm._v(\"and mantaining the\")])]),\n        _c(\"ul\", [\n          _c(\"li\", [\n            _vm._v(\"and the text inside of it is \"),\n            _c(\"strong\", [_vm._v(\"customizable\")])\n          ])\n        ]),\n        _c(\"pre\", { staticClass: \"codice col-md-7\" }, [\n          _vm._v(\n            \" \\n- just adding one of different symbols\\n* at the start of the line\\n+ creates an unordered element of a list\\n* and different ones create an addition space in-between\\n* this would be the \\n<ul>\\n  <li> something like this in html </li>\\n  <li> with tags opening and closing for each list element </li>\\n</ul>\\n\"\n          )\n        ]),\n        _c(\"p\", [_vm._v(\"and for ordered list:\")]),\n        _c(\"ol\", [\n          _c(\"li\", [_vm._v(\"for first we just get\")]),\n          _c(\"li\", [_vm._v(\"the same procedure of\")]),\n          _c(\"li\", [_vm._v(\"the un-ordered list\")])\n        ]),\n        _c(\"pre\", { staticClass: \"codice col-md-7\" }, [\n          _vm._v(\n            \" \\n1. with just adding the specific number\\n2. at the start of the line\\n3. and the number set near indicates its position\\n<ol>\\n  <li> expressed changing only the ul (unordered list) tag </li>\\n  <li> to the <ol> (ordered list) tag in html</li>\\n</ol>\\n\"\n          )\n        ]),\n        _c(\"br\"),\n        _c(\"p\", [\n          _vm._v(\"for \"),\n          _c(\"strong\", [_c(\"em\", [_vm._v(\"links\")])]),\n          _vm._v(\" there are two different \"),\n          _c(\n            \"a\",\n            { attrs: { href: \"http://localhost:8080/Introduction/5571\" } },\n            [_vm._v(\"ways\")]\n          ),\n          _vm._v(\"\\nthe first and more direct:\")\n        ]),\n        _c(\"pre\", { staticClass: \"codice col-md-8\" }, [\n          _vm._v(\n            \" \\n[with a stylable title here and](https://a_plain_link_here.com)\\n\"\n          )\n        ]),\n        _c(\"p\", [\n          _vm._v(\"a \"),\n          _c(\"em\", [_vm._v(\"reference\")]),\n          _vm._v(\" mode is also \"),\n          _c(\n            \"a\",\n            {\n              attrs: {\n                href:\n                  \"https://i.kym-cdn.com/photos/images/original/001/378/030/d4b.jpg\"\n              }\n            },\n            [_vm._v(\"avaiable\")]\n          ),\n          _vm._v(\".\")\n        ]),\n        _c(\"pre\", { staticClass: \"codice col-md-8\" }, [\n          _vm._v(\n            \" \\ndifferes from the last one because both \\n[the title][the reference] are in square brakets\\nwhile the real link has to be paired up with the referece and a :\\n\\n[the reference]:(https://it_is_invisible_from_the_main_view.com)\\n\"\n          )\n        ]),\n        _c(\"p\", [\n          _vm._v(\"in both examples the title in can be \"),\n          _c(\"u\", [_vm._v(\"freely styled\")]),\n          _vm._v(\".\")\n        ]),\n        _c(\"p\", [\n          _vm._v(\n            \"the simples way to set up a plain link is with a pair of < >\\n\"\n          ),\n          _c(\"a\", { attrs: { href: \"https://getbootstrap.com/\" } }, [\n            _vm._v(\"https://getbootstrap.com/\")\n          ])\n        ]),\n        _c(\"pre\", { staticClass: \"codice col-md-10\" }, [\n          _vm._v(\n            ' \\n  <https://getbootstrap.com>\\n  in html would have been:\\n\\n  <a href=\"https://getbootstrap.com/\">plain title </a>\\n  tag valid in the past examples.\\n'\n          )\n        ]),\n        _c(\"br\"),\n        _c(\"p\", [\n          _c(\"strong\", [_c(\"em\", [_vm._v(\"Images\")])]),\n          _vm._v(\" also have a simply way to put them in:\\n\"),\n          _c(\"img\", {\n            attrs: {\n              src: require(\"../../assets/pasted.png\"),\n              alt: \"here comes the alt\"\n            }\n          })\n        ]),\n        _c(\"pre\", { staticClass: \"codice col-md-10\" }, [\n          _vm._v(\n            ' \\nits the same as links but with an exclamation tag\\n![this is just the alt text for when its offline](../../assets/snow.jpg)\\n\\nwhich is the equivalent of:\\n<img href=\"../../assets/snow.jpg\">alt</img>\\non html.\\n'\n          )\n        ]),\n        _c(\"hr\"),\n        _c(\"div\", { staticClass: \"paragraph mb-2\" }, [\n          _vm._v(\"Time for the html\")\n        ]),\n        _c(\"p\", [\n          _c(\"em\", [_vm._v(\"Html\")]),\n          _vm._v(\" is the principal \"),\n          _c(\"u\", [_vm._v(\"computer language\")]),\n          _vm._v(\n            \" used to build web pages, tags can sometimes intralciare the readibility\\nbut the use of \"\n          ),\n          _c(\"em\", [_vm._v(\"classes\")]),\n          _vm._v(\" within allow \"),\n          _c(\"em\", [_vm._v(\"css\")]),\n          _vm._v(\" to \"),\n          _c(\"strong\", [_c(\"em\", [_vm._v(\"style\")])]),\n          _vm._v(\" and position layout elements.\")\n        ]),\n        _c(\"p\", [\n          _vm._v(\"Htlm tags also offer some unique effects like the\\n\"),\n          _c(\"sub\", [_vm._v(\" sub tags \")]),\n          _vm._v(\" and the \"),\n          _c(\"sup\", [_c(\"strong\", [_vm._v(\"sup tags\")])])\n        ]),\n        _c(\"pre\", { staticClass: \"codice col-md-10\" }, [\n          _vm._v(\" \\n<sub> sub tags </sub> or <sup> sup tags </sup>\\n\")\n        ]),\n        _c(\"p\", [\n          _vm._v(\"or the \"),\n          _c(\"mark\", [_vm._v(\"highlight\")]),\n          _vm._v(\" of specific text areas\")\n        ]),\n        _c(\"pre\", { staticClass: \"codice col-md-10\" }, [\n          _vm._v(\" \\n<mark>with a standard white effect</mark>\\n\")\n        ]),\n        _c(\"p\", [\n          _vm._v(\"to mantain a certain \"),\n          _c(\"em\", [_vm._v(\"rhythm\")]),\n          _vm._v(\" during the article\\nI would use the use html \"),\n          _c(\"u\", [_vm._v(\"summary tags\")]),\n          _vm._v(\n            \"\\nto cut some exposition that may not be essential for all readers.\"\n          )\n        ]),\n        _c(\"details\", [\n          _c(\"summary\", [_vm._v(\"something you may or may not already know.\")]),\n          _c(\"p\", [\n            _vm._v(\n              \" -its good to keep the number of lines down and try to save \\n      space for the important data>\"\n            )\n          ])\n        ]),\n        _c(\"br\"),\n        _c(\"p\", [\n          _vm._v(\"In case of smaller details I can\\n\"),\n          _c(\"abbr\", { attrs: { title: \"did you hover me?\" } }, [\n            _vm._v(\" do this \")\n          ])\n        ]),\n        _c(\"pre\", { staticClass: \"codice col-md-10\" }, [\n          _vm._v(\n            ' \\n  <abbr title=\"did you hover me?\"> the title are the details</abbr>\\n'\n          )\n        ]),\n        _c(\"p\", [\n          _vm._v(\"Html also allows me to set up an \"),\n          _c(\"strong\", [_c(\"em\", [_vm._v(\"audio console\")])]),\n          _vm._v(\" if necessary for the argument treated.\")\n        ]),\n        _c(\"audio\", { attrs: { controls: \"\" } }, [\n          _c(\"source\", {\n            attrs: { src: require(\"../../assets/mona.mp3\"), type: \"audio/mp3\" }\n          }),\n          _vm._v(\"\\n  this happears only if source fails\\n\")\n        ]),\n        _c(\"p\", [\n          _vm._v(\n            \"untill now I showed data but thats not enought to set a layout.\\nFor that the rules of display are needed\"\n          )\n        ]),\n        _c(\"p\", [_vm._v(\"-this is the inline sentence\")]),\n        _c(\"p\", [\n          _vm._v(\"-meanwhile this is the\"),\n          _c(\"br\"),\n          _vm._v(\"\\nblock displayed one\")\n        ]),\n        _c(\"pre\", { staticClass: \"codice col-md-10\" }, [\n          _vm._v(\" \\n\"),\n          _c(\"span\", { staticClass: \"lined\" }, [_vm._v(\"-this is the\")]),\n          _vm._v(\"\\n\"),\n          _c(\"span\", [_vm._v(\" inline sentence\")]),\n          _vm._v(\"\\n\"),\n          _c(\"div\", { staticClass: \"spaced\" }, [\n            _vm._v(\"-meanwhile this is the\"),\n            _c(\"div\", [\n              _vm._v(\"\\n\"),\n              _c(\"div\", [_vm._v(\"block displayed one\")]),\n              _vm._v(\"\\n\")\n            ])\n          ])\n        ]),\n        _c(\"p\", [\n          _vm._v(\"as you see the \"),\n          _c(\"em\", [_vm._v(\"break line\")]),\n          _vm._v(\" is valid in one sentence and not in the other.\"),\n          _c(\"br\"),\n          _c(\"strong\", [_vm._v(\"Block\")]),\n          _vm._v(\" level and \"),\n          _c(\"strong\", [_vm._v(\"inline\")]),\n          _vm._v(\" level elements differ on how they mangage the \"),\n          _c(\"strong\", [_vm._v(\"width\")]),\n          _vm._v(\n            \" of the page\\nand aren't limited to the <div> and <span> tag ( the <img> and <a> tag are \"\n          ),\n          _c(\"strong\", [_vm._v(\"inline\")]),\n          _vm._v(\" too).\")\n        ]),\n        _c(\"pre\", { staticClass: \"codice col-md-8\" }, [\n          _vm._v(\n            \" \\nwhich can be implemented in the css file with the property display.\\n.lined{\\n  display: inline;\\n}\\n.spaced{\\n  display: block;\\n}\\n\\nDoing both tag and css class can be an overkill thought.\\n\"\n          )\n        ]),\n        _c(\"p\", [\n          _vm._v(\n            \"this is not easily done in Markdown which display is mostly inline.\"\n          )\n        ]),\n        _c(\"hr\"),\n        _c(\"div\", { staticClass: \"paragraph mb-2\" }, [\n          _vm._v(\"why do this work?\")\n        ]),\n        _c(\"p\", [\n          _vm._v(\"How can I use 2 different \"),\n          _c(\"u\", [_vm._v(\"computer languages\")]),\n          _vm._v(\n            \" under a single file format (.md)?\\nThe Markdown file format \"\n          ),\n          _c(\"em\", [_vm._v(\"allows\")]),\n          _c(\"u\", [_vm._v(\"html code \")]),\n          _vm._v(\" and is able to \"),\n          _c(\"u\", [_vm._v(\"detect and process\")]),\n          _vm._v(\" it each time it gets used,\\nthis great \"),\n          _c(\"strong\", [_vm._v(\"synergy\")]),\n          _vm._v(\n            \" is not very common between languages, not even the markup ones.\"\n          )\n        ]),\n        _c(\"p\", [_vm._v(\"So,\")]),\n        _c(\"p\", [\n          _vm._v(\"why using 2 similar languages and not just Markdown then?\")\n        ]),\n        _c(\"img\", {\n          staticClass: \"righto\",\n          attrs: {\n            src: require(\"../../assets/inside/2.png\"),\n            width: \"280\",\n            height: \"360\"\n          }\n        }),\n        _c(\"p\", [\n          _vm._v(\"The early stages of the \"),\n          _c(\"strong\", [_c(\"em\", [_vm._v(\"Blogk\")])]),\n          _vm._v(\" had Markdown as the default option, considering its \"),\n          _c(\"u\", [_vm._v(\"speed and efficience\")]),\n          _vm._v(\" in showing plain text.\")\n        ]),\n        _c(\"p\", [\n          _vm._v(\n            \"But more and more, during the development progress, Markdown's \"\n          ),\n          _c(\"u\", [_vm._v(\"lack of spacing and styling options\")]),\n          _vm._v(\n            \"\\n(due also to the limitation in my built-in Markdown version),\\ncaused the layout to not provide a \"\n          ),\n          _c(\"em\", [_vm._v(\"satifactory\")]),\n          _vm._v(\n            \" reading experience.\\nMy articles seem like bland and unfinished content within the \"\n          ),\n          _c(\"strong\", [_vm._v(\"Blogk\")]),\n          _vm._v(\".\"),\n          _c(\"br\"),\n          _vm._v(\"\\nThats why at the end I opted for an \"),\n          _c(\"em\", [_vm._v(\"hybrid\")]),\n          _vm._v(\" option, which offered \"),\n          _c(\"strong\", [_vm._v(\"layout\")]),\n          _vm._v(\" possibilities and \"),\n          _c(\"em\", [_vm._v(\"fast typing\")]),\n          _vm._v(\".\")\n        ]),\n        _c(\"details\", [\n          _c(\"summary\", [\n            _vm._v(\n              \"When I refer to layout I refer to the background and text font   \"\n            )\n          ]),\n          _c(\"p\", [\n            _vm._v(\n              \" and also to the position of any image present here, which has its own template of css properties\\n      so I dont have to re code each time I have to post an image, as do the titles.\\n  \"\n            )\n          ])\n        ]),\n        _c(\"br\"),\n        _c(\"p\", [\n          _vm._v(\"Displaying \"),\n          _c(\"strong\", [_vm._v(\"code\")]),\n          _vm._v(\n            ' in any markup file tends not to be easy, considering that it gets\\nimmediatly \"translated\" in text without showing any tag or the internal structure.\\nBoth languages had solutions but the Markdown\\'s one was too'\n          ),\n          _c(\"abbr\", { attrs: { title: \"specific on the code to show\" } }, [\n            _vm._v(\" specific \")\n          ]),\n          _vm._v(\"\\nso here you can see the one that works for me.\")\n        ]),\n        _c(\"details\", [\n          _c(\"summary\", [_vm._v(\"A text convertor could come in handy \")]),\n          _c(\"p\", [\n            _vm._v(\n              \"-to be more precise the textFX plug in the text editot\\n  (in my case Notepad++).\\n  to then TextFx-> convert -> encode_Html\\n  \"\n            )\n          ])\n        ]),\n        _c(\"pre\", { staticClass: \"codice col-md-10\" }, [\n          _vm._v(\n            \" \\n  <pre class=\\\"codice col-md-10\\\"> \\n    the col-md-10 is just to regulate the width of the space for the code, while the 'codice'\\n    class helps us use the same css properties for all the code intances.\\n  </pre>\\n\"\n          )\n        ]),\n        _c(\"br\")\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}